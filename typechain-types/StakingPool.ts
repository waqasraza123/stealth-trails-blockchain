/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface StakingPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimReward"
      | "createPool"
      | "deposit"
      | "emergencyWithdraw"
      | "getPendingReward"
      | "getStakedBalance"
      | "getTotalStaked"
      | "owner"
      | "poolCount"
      | "pools"
      | "stakers"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposited"
      | "PoolCreated"
      | "RewardClaimed"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingReward",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedBalance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStaked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakers",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositedEvent {
  export type InputTuple = [
    user: AddressLike,
    poolId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, poolId: bigint, amount: bigint];
  export interface OutputObject {
    user: string;
    poolId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [
    poolId: BigNumberish,
    rewardRate: BigNumberish,
    externalPoolId: BigNumberish
  ];
  export type OutputTuple = [
    poolId: bigint,
    rewardRate: bigint,
    externalPoolId: bigint
  ];
  export interface OutputObject {
    poolId: bigint;
    rewardRate: bigint;
    externalPoolId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    poolId: BigNumberish,
    reward: BigNumberish
  ];
  export type OutputTuple = [user: string, poolId: bigint, reward: bigint];
  export interface OutputObject {
    user: string;
    poolId: bigint;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    poolId: BigNumberish,
    amount: BigNumberish,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    poolId: bigint,
    amount: bigint,
    reward: bigint
  ];
  export interface OutputObject {
    user: string;
    poolId: bigint;
    amount: bigint;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StakingPool extends BaseContract {
  connect(runner?: ContractRunner | null): StakingPool;
  waitForDeployment(): Promise<this>;

  interface: StakingPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimReward: TypedContractMethod<
    [poolId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createPool: TypedContractMethod<
    [_rewardRate: BigNumberish, externalPoolId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [poolId: BigNumberish, amount: BigNumberish],
    [void],
    "payable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [poolId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getPendingReward: TypedContractMethod<
    [_user: AddressLike, poolId: BigNumberish],
    [bigint],
    "view"
  >;

  getStakedBalance: TypedContractMethod<
    [_user: AddressLike, poolId: BigNumberish],
    [bigint],
    "view"
  >;

  getTotalStaked: TypedContractMethod<[poolId: BigNumberish], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  poolCount: TypedContractMethod<[], [bigint], "view">;

  pools: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        rewardRate: bigint;
        totalStaked: bigint;
        totalRewardsPaid: bigint;
      }
    ],
    "view"
  >;

  stakers: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amountStaked: bigint;
        rewardDebt: bigint;
        lastStakeTime: bigint;
      }
    ],
    "view"
  >;

  withdraw: TypedContractMethod<
    [poolId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<[poolId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createPool"
  ): TypedContractMethod<
    [_rewardRate: BigNumberish, externalPoolId: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [poolId: BigNumberish, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[poolId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPendingReward"
  ): TypedContractMethod<
    [_user: AddressLike, poolId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStakedBalance"
  ): TypedContractMethod<
    [_user: AddressLike, poolId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalStaked"
  ): TypedContractMethod<[poolId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pools"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        rewardRate: bigint;
        totalStaked: bigint;
        totalRewardsPaid: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakers"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amountStaked: bigint;
        rewardDebt: bigint;
        lastStakeTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [poolId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Deposited(address,uint256,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "PoolCreated(uint256,uint256,uint256)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;

    "RewardClaimed(address,uint256,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "Withdrawn(address,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
